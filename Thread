Thread调用start启动运行一个线程，run方法是线程启动后自动执行的业务方法

/**
两个死循环，第二个始终不能运行
*/
public static void main(String[] args){

  while(1==1){
    System.out.println("Hello!");
  }
  
  while(1==1){
    System.out.println("Hi!");
  }
  
}

public class ThreadOne extends Thread{
  @Override
  public void run(){
    while(1==1){
      System.out.println("Hi!");
      Thread.sleep(1000);
    }
 
}

public class ThreadTwo extends Thread{
  @Override
  public void run(){
    while(1==1){
    System.out.println("Hello!");
    Thread.sleep(1000);
  }
}

public static void main(String[] args){
  ThreadOne one = new ThreadOne();
  ThreadTwo two = new ThreadTwo();
  two.start(); //调用start方法，启用线程从而自动执行run方法
  one.start(); //调用start方法，启用线程从而自动执行run方法
}

常用构造器
public Thread() //构造默认名称普通用户线程
public Thread(Runnable target) //构建依赖于Runnable接口实例的普通用户线程
public Thread(Runnable target, String name) //构建依赖于Runnable接口实例的普通用户线程并设置线程名称


实现runnable的自定义类
public class MyRunnable implements Runnable{
  @Override
  public void run(){
    Thread current = Thread.currentThread();
    System.out.println("当前线程的名称是" + current.getName());
  }
}

public class Test2{
  public static void main(String[] args){
    /*使用同一个Runnable实现对象构建Thread线程对象*/
    MyRunnable runnable = new MyRunnable();
    
    Thread th0 = new Thread(runnable, "0");
    Thread th1 = new Thread(runnable, "1");
    
    th0.strat();
    th1.strat();
    
    }
}

线程优先级
static int MAX_PRIORITY[10]
static int MIN_PRIORITY[1]
static int NORMAL_PRIORITY[5]

th0.setPriority(Thread.MAX_PRIORITY);


用多线程计算累加和
public class ComputingCenter implements Runnable{

    private long sum1 = 0;
    private long sum2 = 0;
    private long target;
  
  @Override
  public void run(){
    long limit = target/2; //分界线
    
    if(Thread.currentThread().getName().euqals("count1"){ //判断一下是否为第一个线程，即想要计算前一半累加
      for(long i = 0; i <= limit; i++){
        sum1 += i;
      }
    }
    
    if(Thread.currentThread().getName().euqals("count2"){ //判断一下是否为第一个线程，即想要计算前一半累加
      for(long i = limit + 1; i <= target; i++){
        sum2 += i;
      }
    }
  }
  
  public long getSum1(){
    return sum1;
  }
   
  public long setSum1(long sum1){
    this.sum1 = sum1;
  }
  
  public long getSum2(){
    return sum2;
  }
   
  public long setSum2(long sum2){
    this.sum2 = sum2;
  }
  
   public long setTarget(long target){
    this.target = target;
  }
  
}



public class TestThread{
  public static void main(String[] args){
    testComCenter();
  }
  
  private static void testComCenter(){
    ComputerCenter center = new ComputerCenter();
    center.setTarget(10000000);
    Thread th1 = new Thread(center, "count1");
    Thread th2 = new Thread(center, "count2");
    th1.start();
    th2.start();
    
    long sum = 0;
    while(1 == 1){
      if(th1.getState() == Thread.State.TERMINATED && th2.getState() == Thread.State.TERMINATED){
        sum = center.getSum0() + center.getSum2();
        break;
      }
    }
    
  }
}


线程的阻塞和处理
public static native void sleep(long millis) throws InterruptedException //设置当前线程休眠方法
public static native Thread currentThread() //获得当前正在执行的线程


public class LandlordAndFarmerRunnable implements Runnable{
  private Thread landlord;
  private Thread farmer;
  private List<Integer> list = new ArrayList<>;
  
  @Override
  public void run(){
    
    if(Thread.currentThread() == farmer){
      for(int i =0; i < 1000; i++){
        Random random = new Random();
        list.add(new Interger(random.nextInt(1000)));
        try{
        if(list.size == 100 || list.size == 500 || list.size == 800)
            Thread.sleep(1000*60*3); 
        } catch (InterruptedException e){
          System.out.println("被叫醒");
          e.printStackTrace();
        }
      }
    }
    
    if(Thread.currentThread() == landlord){
        while(1 == 1){
          if(list.size() == 1000) break;
          if(farmer.getState() == Thread.State.TIMED_WAITING){ //发现农民要休息
              System.out.println("叫醒");
              farmer.interrupt(); //调用线程的中断方法
          }
            
        }
    }
    
    
    System.out.println("全部工作量" + list.size());
    for(Integer num : list){
        System.out.println(num);
    }
  }
}


线程联合
public final void join() throws InterruptedException //无限期等待当前线程执行结束
public final void join(long millis) throws InterruptedException //在millis毫秒内等待当前线程执行结束
public final void join(long mil, int nano) throws InterruptedException //在millis毫秒和nano纳秒内等待当前线程执行结束


public class ThreadJoinRunnable implements Runnable{
    @Override
    public void run(){
        if(Thread.currentThread().getName().equals("leader")){
            for(int i = 1; i < 1000000000; ++i){
                if( i % 1000000 == 0){
                    System.out.println("领导正在通过");
                }
            }
        }
    }

}

private static void testThreadJoin(){
    ThreadJoinRunnable tjr = new ThreadJoinRunnable();
    Thread leader = new Thread(tjr, "leader");
    Thread norm1 = new Thread(tjr, "norm1");
    Thread norm2 = new Thread(tjr, "norm2");
    
    leader.start();
    leader.join();
    norm1.start();
    norm2.start();
    
}


多线程数据安全访问
private class SyncDataSupport{
    private List<Integer> list = new ArrayList<>();
    private Vector<Integer> vector = new Vector<>();
    
    public void addData(){
        for(int i = 0; i < 10000; ++i){
            list.add(i); //索引错乱，线程不安全
            vector.add(i); //不报错，线程安全
        }
    }
}

public class ThreadLeft extends Thread{
    
    private SyncDataSupport syn;
    
    @Override
    public void run(){
        syn.addData();
    }
    
    public void setSyn(SynDataSupport syn){
        this.syn = syn;
    }
}


public class ThreadRight extends Thread{
    
    private SyncDataSupport syn;
    
    @Override
    public void run(){
        syn.addData();
    }
    
    public void setSyn(SynDataSupport syn){
        this.syn = syn;
    }
}


public static void main(String[] args){
    SynDataSupport sds = new SynDataSupport();
    ThreadLeft left = new ThreadLeft();
    left.setName("left");
    left.setSyn(sds);
    
    ThreadRight right = new ThreadRight();
    right.setName("right");
    right.setSyn(sds);
    
    left.start();
    right.start(); 
}

同步代码块
synchronized(list){
    list.add(i);
}

同步



