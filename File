File(File dir, String child)
File(String pathName)
File(String parent, String child)
File(URI uri)

//构造器
public class Test{
    public static void main(String[] args){
        File file0 = new File("d:/files/carnames.txt"); //文件其实并不存在，但是可以这样操作，file对象不是null
        file0.exists(); //False
        
        File dir = null; //文件的父路径
        File file2 = new File( dir, "d:/files/carnames.txt"); 
        
        //URI作为构建File对象的参数，必须保证其字符串描述前缀，且路径分隔符必须是/
        URI uri = new URI("file:/files/");
        File file3 = new File(uni);
    }
}


//类方法
public boolean canWrite()
public boolean canRead()
public boolean creatNewFile() throws IOException
public boolean delete()
public boolean exists()

public class FileSupport{
        //根据给定的filePath创建File对象并返回
        public static File createFile(Srting filePath){
                return new File(filePath);
        }
        public static void displayFileInfo(File file) throws IOException{
                System.out.println(file.canRead() ? "可以读取" : "不可读");
                System.out.println(file.canWrite() ? "可以写" : "不可写");
                System.out.println(file.exists() ? "此文件存在" : "文件不存在");
                System.out.println(file.delete() ? "文件已经删除" : "删除失败");
                System.out.println(file.createNewFile() ? "创建成功" : "创建失败");
        }
}


public class Test2{
        public static void main(String[] args){
                Stirng filePath = "d:/files.doc\\carnames.txt";
                File file = FileSupport.createFile(filePath);
                
                try{
                    FileSupport.displayFileInfo(file);
                }catch(IOException e){
                    e.printStackTrace();
                }
        }
}


