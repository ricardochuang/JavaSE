URL
public URL(String spec) throws MalformedURLException
public URL(URL context, String spec) throws MalformedURLException
public URL(String protocol, String host, String file) throws MalformedURLException
public URL(String protocol, String host, int port, String file) throws MalformedURLException

public class Test{
    public static void main(String[] args) throws IOException{
        URL url = new URL("http", "12.0.0.1", 5505, "/index.html");
        url.toString();
    }
}


SocketAddress
public InetSocketAddress(InetAddress addr, int port) //根据ip地址和端口号创建套接字port 0到65535
public InetSocketAddress(int port) //根据通配符（本地0.0.0.0）和端口号创建套接字
public InetSocketAddress(String host, int port) //根据给定的host主机名和端口号创建套接字，参数host主机如果存在安全验证（访问证书）将抛出SecurityExceotion 

public class ServerSystem{
    private InetAddress localhostIP; //本地将要绑定到ServerSocket套接字的辅助组件
    
    private void initInetAddress(){
        if(localhostIP == null){
            localhostIP = Inet4Address.getLocalHost();
        }
    }
    
    private void init(){
        initInetAddress();
    }
    
    public ServerSystem(){
        init();
    }
}


ServerSocket
public ServerSocket() throws IOException //创建非绑定服务器套接字
public ServerSocket(int port)  //创建绑定到特定端口的服务器套接字
public ServerSocket(int port, int backlog) //指定端口号和队列长度
public ServerSocket(int port, int backlog, InetAddress bindAddr) //指定端口号队列长度及指定主机地址创建套接字

public Socket accept() throws IOException //侦听并接受到此套接字的连接，未连接前处于阻塞状态
void close() //关闭此套接字
public void setSoTimeout(int timeout) //以毫秒为单位设置超时时间，如果为0则永不超时
public boolean isBound() //测试ServerSocket是否绑定
public boolean isClosed() //测试ServerSocket是否关闭
public InetAddress getInetAddress() //返回此服务器套接字的本地地址



private ServerSocket serverSocket;

private static final int PORT = 9090;

private static final int MAX_BACL_LOG = 20;

private void initServerSocket(){
    if(serverSocket == null){
        serverSocket = new ServerSocket(PORT, MAX_BACL_LOG, localhostIP);
    }
}


private static final int PORT_SPARE = 9999;

private void starAccepts(){
    if(!serverSocket.isBound()){
        serverSocket.bind(new InetSocketAddress(PORT_SPARE), MAX_BACL_LOG);
    }
    Socket clientSocket = serverSocket.accept(); //等待客户端连接进来，此方法是阻塞（没有连接时处于阻塞）
}


输入输出流
input = client.getInputStream();
dataInput = new DataInputStream(input);
output = client.getOutputStream();
dataOutput = new DataOutputStream(output);


Socket
public Socket() //创建未绑定和连接的套接字
public Socket(InetAddress, addr, int port) //创建并绑定到addr映射的IP地址和port指定的端口号
public Socket(String host, int port) //创建并绑定到host映射的IP地址和port指定的端口号
public Socket(InetAddress remoteAdd, int remotePort, InetAddress localAdd, int localPort) //创建连接到远处服务器的套接字

void bind(SocketAddress bindpoint) //将套接字绑定到本地地址
void close() //关闭此套接字
void connect(SocketAddress endpoint) //将此套接字连接到服务器
void connect(SocketAddress endpoint, int timeout) //指定超时时间
InputStream getInputStream() //返回此套接字的输入流
OutputStream getOutputStream() //返回此套接字的输出流



实现客户端套接字与服务器交互的过程
1. 创建欲绑定的本机地址与端口号以及远程服务器套接字地址与端口号
2. 创建套接字对象并绑定本机地址及端口号
3. 尝试连接目标远程服务器
4. 创建基于套接字的输入输出流
5. 实现信息交互

public class ClientSystem{
        private InetAddress localAddress; //本地主机地址
        private InetAddress remoteAddress; //远程套接字服务器地址
        
        private static final int LOCAL_PORT = 7575; //本地绑定的端口号
        private static final int REMOTE_LOCAL_PORT = 9090; /远程绑定的端口号
        
        
        private Socket client; //客户端套接字对象
        
        //输入输出流
        private InputStream in;
        private OutputStream out;
        private DataInputStream din;
        private DataOutnputStream dout;
        
        
        private void initClientSocket(){
                if(client == null){
                        client = new Socket(); //构建未绑定的客户端套接字
                }
        }
        
        private void initLocalAddress(){
              if(localAddress == null){
                    localAddress = new InetSocketAddress("192.168.0.106", LOCAL_PORT); //构建本地地址
              }  
        }
   
        //构建远程服务器套接字地址
        private void initRemoteAddress(){
              if(remoteAddress == null){
                    remoteAddress = new InetSocketAddress("192.168.0.106", REMOTE_LOCAL_PORT); //构建本地地址
              }  
        } 
   //将套接字绑定到主机地址
    private void bundAddress(){
            client.bind(localAddress);
    }
    
    //请求连接到远程服务器
    private void connectRemoteServer(){
            client.connect(remoteAddress);
    }
    
    public void createSocketInputAndOutput(){
            if(client.isConnected()){
                    in = client.getInputStream();
                    out = client.getOutputStream();
                    din = new DataInputStream(in);
                    dout = new DataInputStream(out);
            }
    }
    
    //实现与服务器进行信息交互的方法
    public void sendAndReceive(){
            connectRemoteServer(); //调用连接服务器的方法
            createSocketInputAndOutput(); //调用创建文件流的方法
            Scanner scan = new Scanner(System.in);
            
            while(1 == 1){
                System.out.println("输入信息，回车发送");
                String mess = scan.next();
                dout.writeUTF(mess); //发送信息给服务器
                String backMess = din.readUTF(); //读取服务器信息
            }
    }
    
    public ClientSystem(){
            initLocalAddress(); //调用创建ip地址方法
            initClientSocket(); //调用套接字创建方法
            initRemoteAddress(); //创建远程主机地址
            bundAddress(); //调用绑定方法
    }

}



UDP
构建DatagramPacket 
public DatagramPacket(byte[] buf, int len)
public DatagramPacket(byte[] buf, int offset, int len)

public DatagramPacket(byte[] buf, int len, InetAddress add, int port)
public DatagramPacket(byte[] buf, int len, SocketAddress add)
public DatagramPacket(byte[] buf, int len, int offset, SocketAddress add)

public void setData(byte[] buf) //设置数据缓冲区
public byte[] getData() //获取数据包缓冲区
public void setSocketAddress(SocketAddress address)
public void SocketAddress getSocketAddress(SocketAddress address)
public void setLength(int length) //设置数据包缓冲区长度
public int length() //返回将要发送或者收到的数据的长度

DatagramSocket构造器
public DatagramSocket() throws SocketException //构造数据报套接字并将其绑定到任何可用端口
public DatagramSocket(int port) throws SocketException //构造数据报套接字并将其绑定到指定用端口
public DatagramSocket(int port, InetAddress add) throws SocketException //构造数据报套接字并将其绑定到指定的本地地址
public DatagramSocket(SockertAddress add) throws SocketException //构造数据报套接字并将其绑定指定的本地套接字地址

public void bind(SocketAddress addr) throws SocketException
public void connect(SocketAddress add) throws SocketException
public void send(DatagramPacket) //发送数据包
public void receive(DatagramPacket p) //接受数据包
public void disconnect() //断开套接字连接
public void close() //关闭数据包套接字



public class ClientStart
    public static void main(String[] args){
        
}

使用UDP协议收发
public class UdpClientSocket{
    
    private SocketAddress remoteAddress; //远程目标主键地址
    private static final int LOCAL_PORT = 6666; //本地端口
    
    private DatagramPacket initDataGram(byte[]){ //构建数据报包
        DatagramPacket packet = null;
        packet = new DatagramPacket(buf, buf.length);
        packet.setSocketAddress(address);
        return packet; //返回数据包对象
    }
    
    private DatagramSocket initDatagramSocket(){
            return new DatagramSocket(LOCAL_PORT);
    }
}



